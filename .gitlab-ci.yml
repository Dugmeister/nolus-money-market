image: "rust:latest"

stages:
  - prep
  - test
  - build
  - optimization
  - deploy

.caching_rust: &caching_rust
    cache:
      paths:
        - /usr/local/cargo/
        - target/

prep-version:check:
  stage: prep
  script:
  #  [[ $CI_COMMIT_REF_PROTECTED == "true" ]]  &&  [[ $CI_COMMIT_TAG =~ /^v?[0-9]+[.][0-9]+([.][0-9]+)?$/  ]]
    - if [[ -n "$CI_COMMIT_TAG" ]] ;
      then
        echo "BUILD_NOLUS_VERSION=true" >> build_version.env ;
      else
        echo "NOLUS_IMAGE_EXIST=true" >> build_version.env ;
      fi
  artifacts:
    reports:
      dotenv: build_version.env

schema:cargo:
  <<: *caching_rust
  stage: test
  script:
    - cargo install cargo-workspaces
    - cargo workspaces exec --no-bail cargo run --example schema

# Use cargo to test the project
test:cargo:
  <<: *caching_rust
  stage: test
  coverage: '/^\d+.\d+% coverage/'
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo install cargo-tarpaulin
    - cargo tarpaulin --out Xml
  artifacts:
    reports:
      cobertura:
        - cobertura.xml

lint:cargo:
  <<: *caching_rust
  stage: test
  script:
    - rustup component add clippy
    - cargo clippy --workspace --verbose --all-targets -- -D warnings

build:cargo:
  <<: *caching_rust
  stage: build
  script:
    - if [[ $BUILD_NOLUS_VERSION == "true" ]] ;
      then
        rustup target add wasm32-unknown-unknown ;
        RUSTFLAGS='-C link-arg=-s' cargo wasm --target-dir ./target ;
      else
        echo "Skip since this is not a new version build" ;
      fi
  artifacts:
    paths:
    - target/
    expire_in: 1 hour

optimization:
  stage: optimization
  tags:
    - shell
  script:
    - if [[ $BUILD_NOLUS_VERSION == "true" ]] ;
      then
        sudo docker run --rm -v "$(pwd)":/code --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry cosmwasm/workspace-optimizer:0.12.5
      else
        echo "Skip since this is not a new version build" ;
      fi
  artifacts:
    paths:
    - artifacts/
    expire_in: 1 hour


deploy:cargo:
  <<: *caching_rust
  stage: deploy
  variables:
    CONTRACTS_INFO_DIR: "contracts.tar.gz"
  needs: ["prep-version:check"]
  before_script:
    - apt update && apt install bash
    - apt install curl
    - echo 'y' | apt install jq
  script:
    - echo "BUILD_NOLUS_VERSION=$BUILD_NOLUS_VERSION"
    - if [[ $BUILD_NOLUS_VERSION == "true" ]] ;
      then
        /bin/bash ./scripts/deploy-contracts-dev-net.sh ;
        tar -czvf $CONTRACTS_INFO_DIR contracts-addresses ;
      else
        echo "Skip deploy since this is not a new version build" ;
      fi
  artifacts:
    name: "contracts-$CI_COMMIT_REF_SLUG"
    paths:
      - $CONTRACTS_INFO_DIR
