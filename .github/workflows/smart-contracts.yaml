name: Smart Contracts
run-name: "Building smart contracts, triggered by ${{ github.actor }}"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    tags:
      - '*'
    paths-ignore:
      - "README.md"
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "README.md"

env:
  CARGO_TERM_COLOR: "always"

jobs:
  check-formatting:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "./.github/actions/rust-cache"
      - uses: "./.github/actions/check-formatting"
  check-codebase:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "./.github/actions/rust-cache"
      - uses: "./.github/actions/check-codebase"
  audit-dependencies:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "./.github/actions/rust-cache"
      - uses: "./.github/actions/audit-dependencies"
  linting:
    runs-on: "ubuntu-latest"
    needs:
      - "check-formatting"
      - "check-codebase"
      - "audit-dependencies"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "./.github/actions/rust-cache"
      - name: "Run linter"
        shell: "sh"
        run: "./lint.sh"
  code-coverage:
    runs-on: "ubuntu-latest"
    needs:
      - "linting"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "./.github/actions/rust-cache"
      - uses: "./.github/actions/code-coverage"
  test-release-profile:
    runs-on: "ubuntu-latest"
    needs:
      - "linting"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "./.github/actions/rust-cache"
      - name: "Run tests in release profile"
        shell: "sh"
        run: "cargo test --release"
  check-wasm:
    runs-on: "ubuntu-latest"
    needs:
      - "linting"
    steps:
      - uses: "actions/checkout@v3"
      - uses: "./.github/actions/rust-cache"
      - shell: "sh"
        run: "cargo install cargo-workspaces"
      - shell: "sh"
        run: "cargo install cosmwasm-check"
      - name: "Building WASM binaries"
        shell: "sh"
        run: "cargo workspaces exec cargo build --target wasm32-unknown-unknown"
      - name: "Checking WASM binaries"
        shell: "sh"
        run: "cosmwasm-check --available-capabilities staking,stargate,cosmwasm_1_1,iterator,neutron ./target/wasm32-unknown-unknown/debug/*.wasm"
  build-optimized-test-net:
    runs-on: "ubuntu-latest"
    needs:
      - "code-coverage"
      - "test-release-profile"
      - "check-wasm"
    if: "github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'"
    steps:
      - uses: "actions/checkout@v3"
      - name: "Build optimized for test-net"
        uses: "./.github/actions/optimized-build"
        with:
          target_net: "test"
  build-optimized-main-net:
    runs-on: "ubuntu-latest"
    needs:
      - "code-coverage"
      - "test-release-profile"
      - "check-wasm"
    if: "github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'"
    steps:
      - uses: "actions/checkout@v3"
      - name: "Build optimized binaries for main-net"
        uses: "./.github/actions/optimized-build"
        with:
          target_net: "main"
